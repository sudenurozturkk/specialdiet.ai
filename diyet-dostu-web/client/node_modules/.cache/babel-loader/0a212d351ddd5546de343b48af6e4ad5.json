{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\specialdiet.ai\\\\diyet-dostu-web\\\\client\\\\src\\\\components\\\\AiChat.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport '../styles/aiChat.css';\nconst AiChat = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [userData, setUserData] = useState(null);\n  const [userInfo, setUserInfo] = useState({\n    height: '',\n    weight: '',\n    age: '',\n    gender: '',\n    activity: '',\n    goal: '',\n    allergies: '',\n    preferences: '',\n    health: '',\n    collected: false\n  });\n  const [stage, setStage] = useState('greeting'); // greeting, collecting, chat\n  const messagesEndRef = useRef(null);\n\n  // Sayfa yüklendiğinde kullanıcı verilerini al\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) return;\n        const response = await axios.get('http://localhost:5000/api/profile', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (response.data) {\n          setUserData(response.data);\n\n          // Kullanıcı bilgilerini topla\n          const {\n            info,\n            goal,\n            name\n          } = response.data;\n          if (info) {\n            setUserInfo(prevInfo => ({\n              ...prevInfo,\n              height: info.height || '',\n              weight: info.weight || '',\n              age: info.age || '',\n              gender: info.gender || '',\n              health: info.diseases || ''\n            }));\n          }\n          if (goal) {\n            setUserInfo(prevInfo => ({\n              ...prevInfo,\n              goal: goal\n            }));\n          }\n\n          // Hoşgeldin mesajını ekle\n          addBotMessage(`Merhaba ${name || 'dostum'}! Ben Diyet Dostu AI asistanınız. Size özel beslenme ve fitness planları oluşturmak için yanınızdayım. Size nasıl yardımcı olabilirim?`);\n\n          // Eğer temel bilgiler mevcutsa, toplama aşamasını atla\n          if (info && info.height && info.weight && info.age && info.gender && goal) {\n            setUserInfo(prevInfo => ({\n              ...prevInfo,\n              collected: true\n            }));\n            setStage('chat');\n            setTimeout(() => {\n              addBotMessage(\"Profil bilgilerinizi sistemde görüyorum. Size daha iyi öneriler sunabilmem için şunları bilmem çok yardımcı olur: \" + \"\\n1. Günlük aktivite seviyeniz nedir? (Sedanter, hafif aktif, orta aktif, çok aktif)\" + \"\\n2. Herhangi bir besin alerjiniz var mı?\" + \"\\n3. Sevmediğiniz yiyecekler veya tercih ettiğiniz beslenme türü var mı? (örn. vejeteryan, vegan, glutensiz vb.)\");\n            }, 1000);\n          } else {\n            // Bilgileri topla\n            setStage('collecting');\n            setTimeout(() => {\n              addBotMessage(\"Size özel bir beslenme ve egzersiz planı oluşturmak için birkaç bilgiye ihtiyacım var. Bilgilerinizi almak için size bazı sorular soracağım.\");\n              askNextQuestion();\n            }, 1000);\n          }\n        }\n      } catch (error) {\n        console.error('Kullanıcı verileri alınırken hata:', error);\n        // Giriş yapılmamış bile olsa sohbeti başlat\n        addBotMessage(\"Merhaba! Ben Diyet Dostu AI asistanınız. Size özel beslenme ve fitness planları oluşturmak için yanınızdayım. Başlamadan önce sizden bazı bilgiler almalıyım.\");\n        setStage('collecting');\n        setTimeout(() => {\n          askNextQuestion();\n        }, 1000);\n      }\n    };\n    fetchUserData();\n  }, []);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  const addBotMessage = text => {\n    setMessages(prevMessages => [...prevMessages, {\n      sender: 'bot',\n      text,\n      timestamp: new Date()\n    }]);\n  };\n  const addUserMessage = text => {\n    setMessages(prevMessages => [...prevMessages, {\n      sender: 'user',\n      text,\n      timestamp: new Date()\n    }]);\n  };\n  const askNextQuestion = () => {\n    const {\n      height,\n      weight,\n      age,\n      gender,\n      activity,\n      goal,\n      allergies,\n      preferences\n    } = userInfo;\n    if (!height) {\n      addBotMessage(\"Boyunuz kaç cm?\");\n      return;\n    }\n    if (!weight) {\n      addBotMessage(\"Şu anki kilonuz nedir? (kg)\");\n      return;\n    }\n    if (!age) {\n      addBotMessage(\"Yaşınız?\");\n      return;\n    }\n    if (!gender) {\n      addBotMessage(\"Cinsiyetiniz nedir? (erkek/kadın/diğer)\");\n      return;\n    }\n    if (!activity) {\n      addBotMessage(\"Günlük aktivite seviyenizi nasıl tanımlarsınız? (1-5 arası bir puan verebilirsiniz)\\n1: Hareketsiz, 2: Hafif aktif, 3: Orta aktif, 4: Aktif, 5: Çok aktif\");\n      return;\n    }\n    if (!goal) {\n      addBotMessage(\"Ana hedefiniz nedir? (kilo vermek, kilo almak, kilo korumak, kas kazanmak, sağlıklı beslenmek)\");\n      return;\n    }\n    if (!allergies) {\n      addBotMessage(\"Herhangi bir besin alerjiniz veya sağlık sorunlarınız var mı? (yoksa 'yok' yazabilirsiniz)\");\n      return;\n    }\n    if (!preferences) {\n      addBotMessage(\"Beslenme tercihleriniz nelerdir? (sevmediğiniz yiyecekler, vegan/vejetaryen, vs. yoksa 'yok' yazabilirsiniz)\");\n      return;\n    }\n\n    // Tüm bilgiler toplandı\n    setUserInfo(prevInfo => ({\n      ...prevInfo,\n      collected: true\n    }));\n    setStage('chat');\n\n    // Bilgileri sunucuya kaydet\n    saveUserInfo();\n\n    // Toplanan bilgileri özetleyip, ne yapabileceğini anlat\n    addBotMessage(`Teşekkürler! Tüm bilgilerinizi aldım. İşte özetlediğim profil bilgileriniz:\\n\n      Boy: ${height} cm\n      Kilo: ${weight} kg\n      Yaş: ${age}\n      Cinsiyet: ${gender}\n      Aktivite seviyesi: ${activity}\n      Hedef: ${goal}\n      Alerjiler/Sağlık sorunları: ${allergies}\n      Beslenme tercihleri: ${preferences}\n      \n      Artık size özel beslenme ve egzersiz planları oluşturabilirim. İşte benden isteyebileceğiniz bazı şeyler:\n      \n      1. \"Bana haftalık diyet planı oluştur\" - Hedeflerinize uygun 7 günlük beslenme planı\n      2. \"Egzersiz programı öner\" - Fitness seviyenize uygun aktiviteler\n      3. \"Kalori hesapla\" - Günlük kalori ihtiyacınızı ve makro besin dağılımını hesaplama\n      4. \"X yemeğinin tarifi\" - Sağlıklı yemek tarifleri ve alternatifler\n      5. \"Kilo vermek için öneriler\" - Hedefinize özel ipuçları ve stratejiler\n      \n      Nasıl yardımcı olabilirim?`);\n  };\n  const saveUserInfo = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) return;\n\n      // Kullanıcı bilgilerini güncelle\n      await axios.post('http://localhost:5000/api/profile/update', {\n        type: 'personal',\n        height: userInfo.height,\n        weight: userInfo.weight,\n        age: userInfo.age,\n        gender: userInfo.gender,\n        goal: userInfo.goal,\n        aiChatInfo: {\n          activity: userInfo.activity,\n          allergies: userInfo.allergies,\n          preferences: userInfo.preferences\n        }\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log('Kullanıcı bilgileri başarıyla güncellendi');\n    } catch (error) {\n      console.error('Bilgiler kaydedilirken hata:', error);\n    }\n  };\n  const processUserInfo = message => {\n    const {\n      height,\n      weight,\n      age,\n      gender,\n      activity,\n      goal,\n      allergies,\n      preferences\n    } = userInfo;\n    if (!height) {\n      const heightMatch = message.match(/(\\d+)/);\n      if (heightMatch) {\n        setUserInfo(prevInfo => ({\n          ...prevInfo,\n          height: heightMatch[0]\n        }));\n        setTimeout(() => askNextQuestion(), 500);\n      } else {\n        addBotMessage(\"Lütfen boyunuzu cm cinsinden sayı olarak giriniz (örn: 175)\");\n      }\n      return true;\n    }\n    if (!weight) {\n      const weightMatch = message.match(/(\\d+)/);\n      if (weightMatch) {\n        setUserInfo(prevInfo => ({\n          ...prevInfo,\n          weight: weightMatch[0]\n        }));\n        setTimeout(() => askNextQuestion(), 500);\n      } else {\n        addBotMessage(\"Lütfen kilonuzu kg cinsinden sayı olarak giriniz (örn: 70)\");\n      }\n      return true;\n    }\n    if (!age) {\n      const ageMatch = message.match(/(\\d+)/);\n      if (ageMatch) {\n        setUserInfo(prevInfo => ({\n          ...prevInfo,\n          age: ageMatch[0]\n        }));\n        setTimeout(() => askNextQuestion(), 500);\n      } else {\n        addBotMessage(\"Lütfen yaşınızı sayı olarak giriniz (örn: 30)\");\n      }\n      return true;\n    }\n    if (!gender) {\n      const lowerMessage = message.toLowerCase();\n      if (lowerMessage.includes('erkek')) {\n        setUserInfo(prevInfo => ({\n          ...prevInfo,\n          gender: 'erkek'\n        }));\n      } else if (lowerMessage.includes('kadın') || lowerMessage.includes('kadin')) {\n        setUserInfo(prevInfo => ({\n          ...prevInfo,\n          gender: 'kadın'\n        }));\n      } else if (lowerMessage.includes('diğer') || lowerMessage.includes('diger')) {\n        setUserInfo(prevInfo => ({\n          ...prevInfo,\n          gender: 'diğer'\n        }));\n      } else {\n        addBotMessage(\"Lütfen cinsiyetinizi 'erkek', 'kadın' veya 'diğer' olarak belirtiniz\");\n        return true;\n      }\n      setTimeout(() => askNextQuestion(), 500);\n      return true;\n    }\n    if (!activity) {\n      const activityMatch = message.match(/([1-5])/);\n      if (activityMatch) {\n        const activityLevel = activityMatch[0];\n        let activityDesc = \"\";\n        switch (activityLevel) {\n          case \"1\":\n            activityDesc = \"Hareketsiz\";\n            break;\n          case \"2\":\n            activityDesc = \"Hafif aktif\";\n            break;\n          case \"3\":\n            activityDesc = \"Orta aktif\";\n            break;\n          case \"4\":\n            activityDesc = \"Aktif\";\n            break;\n          case \"5\":\n            activityDesc = \"Çok aktif\";\n            break;\n        }\n        setUserInfo(prevInfo => ({\n          ...prevInfo,\n          activity: activityDesc\n        }));\n        setTimeout(() => askNextQuestion(), 500);\n      } else {\n        addBotMessage(\"Lütfen aktivite seviyenizi 1-5 arası bir sayı ile belirtiniz\");\n      }\n      return true;\n    }\n    if (!goal) {\n      const lowerMessage = message.toLowerCase();\n      let goalValue = \"\";\n      if (lowerMessage.includes('kilo ver')) {\n        goalValue = 'kilo_verme';\n      } else if (lowerMessage.includes('kilo al')) {\n        goalValue = 'kilo_alma';\n      } else if (lowerMessage.includes('kilo koru')) {\n        goalValue = 'kilo_koruma';\n      } else if (lowerMessage.includes('kas') || lowerMessage.includes('kaslı')) {\n        goalValue = 'kas_kazanma';\n      } else if (lowerMessage.includes('sağlık') || lowerMessage.includes('saglik')) {\n        goalValue = 'saglikli_beslenme';\n      } else {\n        addBotMessage(\"Lütfen hedefinizi 'kilo vermek', 'kilo almak', 'kilo korumak', 'kas kazanmak' veya 'sağlıklı beslenmek' şeklinde belirtiniz\");\n        return true;\n      }\n      setUserInfo(prevInfo => ({\n        ...prevInfo,\n        goal: goalValue\n      }));\n      setTimeout(() => askNextQuestion(), 500);\n      return true;\n    }\n    if (!allergies) {\n      setUserInfo(prevInfo => ({\n        ...prevInfo,\n        allergies: message\n      }));\n      setTimeout(() => askNextQuestion(), 500);\n      return true;\n    }\n    if (!preferences) {\n      setUserInfo(prevInfo => ({\n        ...prevInfo,\n        preferences: message\n      }));\n      setTimeout(() => askNextQuestion(), 500);\n      return true;\n    }\n    return false;\n  };\n  const generateResponse = async userMessage => {\n    setIsLoading(true);\n    try {\n      // AI asistanın sistem bilgilerini oluştur\n      const contextInfo = `\n        KULLANICI PROFİLİ:\n        Boy: ${userInfo.height} cm\n        Kilo: ${userInfo.weight} kg\n        Yaş: ${userInfo.age}\n        Cinsiyet: ${userInfo.gender}\n        Aktivite seviyesi: ${userInfo.activity}\n        Hedef: ${userInfo.goal === 'kilo_verme' ? 'Kilo vermek' : userInfo.goal === 'kilo_alma' ? 'Kilo almak' : userInfo.goal === 'kilo_koruma' ? 'Kilo korumak' : userInfo.goal === 'kas_kazanma' ? 'Kas kazanmak' : 'Sağlıklı beslenmek'}\n        Alerjiler/Sağlık sorunları: ${userInfo.allergies}\n        Beslenme tercihleri: ${userInfo.preferences}\n        \n        SİSTEM BİLGİSİ:\n        Sen bir beslenme uzmanı, fitness koçu ve aşçısın. Kullanıcıya özel diyet ve egzersiz programları hazırlayabilir, yemek tarifleri verebilirsin.\n        Kilo verme için günlük 500-1000 kalori açığı, kilo alma için günlük 300-500 kalori fazlalığı hedefle.\n        Harris-Benedict denklemi ile bazal metabolizma hızını hesapla.\n        Tarifler Türk mutfağına uygun olmalı ve bulunan malzemeleri kullanmalı.\n        Kullanıcının hedeflerine ve aktivite düzeyine göre protein, karbonhidrat ve yağ oranları:\n        - Kilo verme: protein %30-35, karbonhidrat %40-45, yağ %20-25\n        - Kilo alma: protein %25-30, karbonhidrat %50-55, yağ %20-25\n        - Kas kazanma: protein %30-35, karbonhidrat %45-50, yağ %15-20\n        - Sağlıklı beslenme: protein %20-25, karbonhidrat %50-55, yağ %25-30\n      `;\n\n      // Önceki mesaj geçmişini oluştur\n      const previousMessages = messages.slice(-6) // Son 6 mesajı al\n      .map(msg => ({\n        role: msg.sender === 'user' ? 'user' : 'assistant',\n        content: msg.text\n      }));\n\n      // AI isteği gönder\n      const response = await axios.post('http://localhost:5000/api/ai/chat', {\n        messages: [{\n          role: 'system',\n          content: contextInfo\n        }, ...previousMessages, {\n          role: 'user',\n          content: userMessage\n        }]\n      });\n      if (response.data && response.data.response) {\n        addBotMessage(response.data.response);\n      } else {\n        addBotMessage(\"Üzgünüm, şu anda yanıt oluşturamadım. Lütfen daha sonra tekrar deneyin.\");\n      }\n    } catch (error) {\n      console.error('AI yanıt üretirken hata:', error);\n      addBotMessage(\"Üzgünüm, bir hata oluştu. Lütfen daha sonra tekrar deneyin.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleSend = async e => {\n    e.preventDefault();\n    if (!input.trim()) return;\n    const userMessage = input;\n    addUserMessage(userMessage);\n    setInput('');\n    if (stage === 'collecting' && !userInfo.collected) {\n      const handled = processUserInfo(userMessage);\n      if (handled) return;\n    }\n    await generateResponse(userMessage);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 11\n    }\n  }, \"Diyet Dostu AI Asistan\\u0131\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 11\n    }\n  }, \"Ki\\u015Fisel beslenme ve fitness uzman\\u0131n\\u0131z\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"messages-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 7\n    }\n  }, messages.map((message, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    className: `message ${message.sender}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"message-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 13\n    }\n  }, message.text.split('\\n').map((item, key) => /*#__PURE__*/React.createElement(\"p\", {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 17\n    }\n  }, item))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"message-time\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 13\n    }\n  }, new Date(message.timestamp).toLocaleTimeString([], {\n    hour: '2-digit',\n    minute: '2-digit'\n  })))), isLoading && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"message bot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"message-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"typing-indicator\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 17\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    ref: messagesEndRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"chat-input-form\",\n    onSubmit: handleSend,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Mesaj\\u0131n\\u0131z\\u0131 yaz\\u0131n...\",\n    value: input,\n    onChange: e => setInput(e.target.value),\n    disabled: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: isLoading || !input.trim(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    stroke: \"currentColor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: 2,\n    d: \"M12 19l9 2-9-18-9 18 9-2zm0 0v-8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 13\n    }\n  })))));\n};\nexport default AiChat;","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","AiChat","messages","setMessages","input","setInput","isLoading","setIsLoading","userData","setUserData","userInfo","setUserInfo","height","weight","age","gender","activity","goal","allergies","preferences","health","collected","stage","setStage","messagesEndRef","fetchUserData","token","localStorage","getItem","response","get","headers","Authorization","data","info","name","prevInfo","diseases","addBotMessage","setTimeout","askNextQuestion","error","console","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","text","prevMessages","sender","timestamp","Date","addUserMessage","saveUserInfo","post","type","aiChatInfo","log","processUserInfo","message","heightMatch","match","weightMatch","ageMatch","lowerMessage","toLowerCase","includes","activityMatch","activityLevel","activityDesc","goalValue","generateResponse","userMessage","contextInfo","previousMessages","slice","map","msg","role","content","handleSend","e","preventDefault","trim","handled","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","index","key","split","item","toLocaleTimeString","hour","minute","ref","onSubmit","placeholder","value","onChange","target","disabled","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d"],"sources":["C:/Users/Administrator/Desktop/specialdiet.ai/diyet-dostu-web/client/src/components/AiChat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport '../styles/aiChat.css';\r\n\r\nconst AiChat = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [userData, setUserData] = useState(null);\r\n  const [userInfo, setUserInfo] = useState({\r\n    height: '',\r\n    weight: '',\r\n    age: '',\r\n    gender: '',\r\n    activity: '',\r\n    goal: '',\r\n    allergies: '',\r\n    preferences: '',\r\n    health: '',\r\n    collected: false\r\n  });\r\n  const [stage, setStage] = useState('greeting'); // greeting, collecting, chat\r\n  const messagesEndRef = useRef(null);\r\n\r\n  // Sayfa yüklendiğinde kullanıcı verilerini al\r\n  useEffect(() => {\r\n    const fetchUserData = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        if (!token) return;\r\n\r\n        const response = await axios.get('http://localhost:5000/api/profile', {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n        });\r\n\r\n        if (response.data) {\r\n          setUserData(response.data);\r\n          \r\n          // Kullanıcı bilgilerini topla\r\n          const { info, goal, name } = response.data;\r\n          if (info) {\r\n            setUserInfo(prevInfo => ({\r\n              ...prevInfo,\r\n              height: info.height || '',\r\n              weight: info.weight || '',\r\n              age: info.age || '',\r\n              gender: info.gender || '',\r\n              health: info.diseases || '',\r\n            }));\r\n          }\r\n          \r\n          if (goal) {\r\n            setUserInfo(prevInfo => ({\r\n              ...prevInfo,\r\n              goal: goal\r\n            }));\r\n          }\r\n\r\n          // Hoşgeldin mesajını ekle\r\n          addBotMessage(`Merhaba ${name || 'dostum'}! Ben Diyet Dostu AI asistanınız. Size özel beslenme ve fitness planları oluşturmak için yanınızdayım. Size nasıl yardımcı olabilirim?`);\r\n          \r\n          // Eğer temel bilgiler mevcutsa, toplama aşamasını atla\r\n          if (info && info.height && info.weight && info.age && info.gender && goal) {\r\n            setUserInfo(prevInfo => ({\r\n              ...prevInfo,\r\n              collected: true\r\n            }));\r\n            setStage('chat');\r\n            \r\n            setTimeout(() => {\r\n              addBotMessage(\r\n                \"Profil bilgilerinizi sistemde görüyorum. Size daha iyi öneriler sunabilmem için şunları bilmem çok yardımcı olur: \" +\r\n                \"\\n1. Günlük aktivite seviyeniz nedir? (Sedanter, hafif aktif, orta aktif, çok aktif)\" + \r\n                \"\\n2. Herhangi bir besin alerjiniz var mı?\" +\r\n                \"\\n3. Sevmediğiniz yiyecekler veya tercih ettiğiniz beslenme türü var mı? (örn. vejeteryan, vegan, glutensiz vb.)\"\r\n              );\r\n            }, 1000);\r\n          } else {\r\n            // Bilgileri topla\r\n            setStage('collecting');\r\n            setTimeout(() => {\r\n              addBotMessage(\"Size özel bir beslenme ve egzersiz planı oluşturmak için birkaç bilgiye ihtiyacım var. Bilgilerinizi almak için size bazı sorular soracağım.\");\r\n              askNextQuestion();\r\n            }, 1000);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Kullanıcı verileri alınırken hata:', error);\r\n        // Giriş yapılmamış bile olsa sohbeti başlat\r\n        addBotMessage(\"Merhaba! Ben Diyet Dostu AI asistanınız. Size özel beslenme ve fitness planları oluşturmak için yanınızdayım. Başlamadan önce sizden bazı bilgiler almalıyım.\");\r\n        setStage('collecting');\r\n        setTimeout(() => {\r\n          askNextQuestion();\r\n        }, 1000);\r\n      }\r\n    };\r\n\r\n    fetchUserData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  const addBotMessage = (text) => {\r\n    setMessages(prevMessages => [\r\n      ...prevMessages, \r\n      { \r\n        sender: 'bot', \r\n        text, \r\n        timestamp: new Date() \r\n      }\r\n    ]);\r\n  };\r\n\r\n  const addUserMessage = (text) => {\r\n    setMessages(prevMessages => [\r\n      ...prevMessages, \r\n      { \r\n        sender: 'user', \r\n        text, \r\n        timestamp: new Date() \r\n      }\r\n    ]);\r\n  };\r\n\r\n  const askNextQuestion = () => {\r\n    const { height, weight, age, gender, activity, goal, allergies, preferences } = userInfo;\r\n\r\n    if (!height) {\r\n      addBotMessage(\"Boyunuz kaç cm?\");\r\n      return;\r\n    }\r\n    if (!weight) {\r\n      addBotMessage(\"Şu anki kilonuz nedir? (kg)\");\r\n      return;\r\n    }\r\n    if (!age) {\r\n      addBotMessage(\"Yaşınız?\");\r\n      return;\r\n    }\r\n    if (!gender) {\r\n      addBotMessage(\"Cinsiyetiniz nedir? (erkek/kadın/diğer)\");\r\n      return;\r\n    }\r\n    if (!activity) {\r\n      addBotMessage(\"Günlük aktivite seviyenizi nasıl tanımlarsınız? (1-5 arası bir puan verebilirsiniz)\\n1: Hareketsiz, 2: Hafif aktif, 3: Orta aktif, 4: Aktif, 5: Çok aktif\");\r\n      return;\r\n    }\r\n    if (!goal) {\r\n      addBotMessage(\"Ana hedefiniz nedir? (kilo vermek, kilo almak, kilo korumak, kas kazanmak, sağlıklı beslenmek)\");\r\n      return;\r\n    }\r\n    if (!allergies) {\r\n      addBotMessage(\"Herhangi bir besin alerjiniz veya sağlık sorunlarınız var mı? (yoksa 'yok' yazabilirsiniz)\");\r\n      return;\r\n    }\r\n    if (!preferences) {\r\n      addBotMessage(\"Beslenme tercihleriniz nelerdir? (sevmediğiniz yiyecekler, vegan/vejetaryen, vs. yoksa 'yok' yazabilirsiniz)\");\r\n      return;\r\n    }\r\n\r\n    // Tüm bilgiler toplandı\r\n    setUserInfo(prevInfo => ({ ...prevInfo, collected: true }));\r\n    setStage('chat');\r\n    \r\n    // Bilgileri sunucuya kaydet\r\n    saveUserInfo();\r\n    \r\n    // Toplanan bilgileri özetleyip, ne yapabileceğini anlat\r\n    addBotMessage(\r\n      `Teşekkürler! Tüm bilgilerinizi aldım. İşte özetlediğim profil bilgileriniz:\\n\r\n      Boy: ${height} cm\r\n      Kilo: ${weight} kg\r\n      Yaş: ${age}\r\n      Cinsiyet: ${gender}\r\n      Aktivite seviyesi: ${activity}\r\n      Hedef: ${goal}\r\n      Alerjiler/Sağlık sorunları: ${allergies}\r\n      Beslenme tercihleri: ${preferences}\r\n      \r\n      Artık size özel beslenme ve egzersiz planları oluşturabilirim. İşte benden isteyebileceğiniz bazı şeyler:\r\n      \r\n      1. \"Bana haftalık diyet planı oluştur\" - Hedeflerinize uygun 7 günlük beslenme planı\r\n      2. \"Egzersiz programı öner\" - Fitness seviyenize uygun aktiviteler\r\n      3. \"Kalori hesapla\" - Günlük kalori ihtiyacınızı ve makro besin dağılımını hesaplama\r\n      4. \"X yemeğinin tarifi\" - Sağlıklı yemek tarifleri ve alternatifler\r\n      5. \"Kilo vermek için öneriler\" - Hedefinize özel ipuçları ve stratejiler\r\n      \r\n      Nasıl yardımcı olabilirim?`\r\n    );\r\n  };\r\n\r\n  const saveUserInfo = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) return;\r\n\r\n      // Kullanıcı bilgilerini güncelle\r\n      await axios.post(\r\n        'http://localhost:5000/api/profile/update',\r\n        {\r\n          type: 'personal',\r\n          height: userInfo.height,\r\n          weight: userInfo.weight,\r\n          age: userInfo.age,\r\n          gender: userInfo.gender,\r\n          goal: userInfo.goal,\r\n          aiChatInfo: {\r\n            activity: userInfo.activity,\r\n            allergies: userInfo.allergies,\r\n            preferences: userInfo.preferences\r\n          }\r\n        },\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n\r\n      console.log('Kullanıcı bilgileri başarıyla güncellendi');\r\n    } catch (error) {\r\n      console.error('Bilgiler kaydedilirken hata:', error);\r\n    }\r\n  };\r\n\r\n  const processUserInfo = (message) => {\r\n    const { height, weight, age, gender, activity, goal, allergies, preferences } = userInfo;\r\n\r\n    if (!height) {\r\n      const heightMatch = message.match(/(\\d+)/);\r\n      if (heightMatch) {\r\n        setUserInfo(prevInfo => ({ ...prevInfo, height: heightMatch[0] }));\r\n        setTimeout(() => askNextQuestion(), 500);\r\n      } else {\r\n        addBotMessage(\"Lütfen boyunuzu cm cinsinden sayı olarak giriniz (örn: 175)\");\r\n      }\r\n      return true;\r\n    }\r\n    \r\n    if (!weight) {\r\n      const weightMatch = message.match(/(\\d+)/);\r\n      if (weightMatch) {\r\n        setUserInfo(prevInfo => ({ ...prevInfo, weight: weightMatch[0] }));\r\n        setTimeout(() => askNextQuestion(), 500);\r\n      } else {\r\n        addBotMessage(\"Lütfen kilonuzu kg cinsinden sayı olarak giriniz (örn: 70)\");\r\n      }\r\n      return true;\r\n    }\r\n    \r\n    if (!age) {\r\n      const ageMatch = message.match(/(\\d+)/);\r\n      if (ageMatch) {\r\n        setUserInfo(prevInfo => ({ ...prevInfo, age: ageMatch[0] }));\r\n        setTimeout(() => askNextQuestion(), 500);\r\n      } else {\r\n        addBotMessage(\"Lütfen yaşınızı sayı olarak giriniz (örn: 30)\");\r\n      }\r\n      return true;\r\n    }\r\n    \r\n    if (!gender) {\r\n      const lowerMessage = message.toLowerCase();\r\n      if (lowerMessage.includes('erkek')) {\r\n        setUserInfo(prevInfo => ({ ...prevInfo, gender: 'erkek' }));\r\n      } else if (lowerMessage.includes('kadın') || lowerMessage.includes('kadin')) {\r\n        setUserInfo(prevInfo => ({ ...prevInfo, gender: 'kadın' }));\r\n      } else if (lowerMessage.includes('diğer') || lowerMessage.includes('diger')) {\r\n        setUserInfo(prevInfo => ({ ...prevInfo, gender: 'diğer' }));\r\n      } else {\r\n        addBotMessage(\"Lütfen cinsiyetinizi 'erkek', 'kadın' veya 'diğer' olarak belirtiniz\");\r\n        return true;\r\n      }\r\n      setTimeout(() => askNextQuestion(), 500);\r\n      return true;\r\n    }\r\n    \r\n    if (!activity) {\r\n      const activityMatch = message.match(/([1-5])/);\r\n      if (activityMatch) {\r\n        const activityLevel = activityMatch[0];\r\n        let activityDesc = \"\";\r\n        \r\n        switch(activityLevel) {\r\n          case \"1\": activityDesc = \"Hareketsiz\"; break;\r\n          case \"2\": activityDesc = \"Hafif aktif\"; break;\r\n          case \"3\": activityDesc = \"Orta aktif\"; break;\r\n          case \"4\": activityDesc = \"Aktif\"; break;\r\n          case \"5\": activityDesc = \"Çok aktif\"; break;\r\n        }\r\n        \r\n        setUserInfo(prevInfo => ({ ...prevInfo, activity: activityDesc }));\r\n        setTimeout(() => askNextQuestion(), 500);\r\n      } else {\r\n        addBotMessage(\"Lütfen aktivite seviyenizi 1-5 arası bir sayı ile belirtiniz\");\r\n      }\r\n      return true;\r\n    }\r\n    \r\n    if (!goal) {\r\n      const lowerMessage = message.toLowerCase();\r\n      let goalValue = \"\";\r\n      \r\n      if (lowerMessage.includes('kilo ver')) {\r\n        goalValue = 'kilo_verme';\r\n      } else if (lowerMessage.includes('kilo al')) {\r\n        goalValue = 'kilo_alma';\r\n      } else if (lowerMessage.includes('kilo koru')) {\r\n        goalValue = 'kilo_koruma';\r\n      } else if (lowerMessage.includes('kas') || lowerMessage.includes('kaslı')) {\r\n        goalValue = 'kas_kazanma';\r\n      } else if (lowerMessage.includes('sağlık') || lowerMessage.includes('saglik')) {\r\n        goalValue = 'saglikli_beslenme';\r\n      } else {\r\n        addBotMessage(\"Lütfen hedefinizi 'kilo vermek', 'kilo almak', 'kilo korumak', 'kas kazanmak' veya 'sağlıklı beslenmek' şeklinde belirtiniz\");\r\n        return true;\r\n      }\r\n      \r\n      setUserInfo(prevInfo => ({ ...prevInfo, goal: goalValue }));\r\n      setTimeout(() => askNextQuestion(), 500);\r\n      return true;\r\n    }\r\n    \r\n    if (!allergies) {\r\n      setUserInfo(prevInfo => ({ ...prevInfo, allergies: message }));\r\n      setTimeout(() => askNextQuestion(), 500);\r\n      return true;\r\n    }\r\n    \r\n    if (!preferences) {\r\n      setUserInfo(prevInfo => ({ ...prevInfo, preferences: message }));\r\n      setTimeout(() => askNextQuestion(), 500);\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  };\r\n\r\n  const generateResponse = async (userMessage) => {\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      // AI asistanın sistem bilgilerini oluştur\r\n      const contextInfo = `\r\n        KULLANICI PROFİLİ:\r\n        Boy: ${userInfo.height} cm\r\n        Kilo: ${userInfo.weight} kg\r\n        Yaş: ${userInfo.age}\r\n        Cinsiyet: ${userInfo.gender}\r\n        Aktivite seviyesi: ${userInfo.activity}\r\n        Hedef: ${userInfo.goal === 'kilo_verme' ? 'Kilo vermek' : \r\n                userInfo.goal === 'kilo_alma' ? 'Kilo almak' : \r\n                userInfo.goal === 'kilo_koruma' ? 'Kilo korumak' : \r\n                userInfo.goal === 'kas_kazanma' ? 'Kas kazanmak' : 'Sağlıklı beslenmek'}\r\n        Alerjiler/Sağlık sorunları: ${userInfo.allergies}\r\n        Beslenme tercihleri: ${userInfo.preferences}\r\n        \r\n        SİSTEM BİLGİSİ:\r\n        Sen bir beslenme uzmanı, fitness koçu ve aşçısın. Kullanıcıya özel diyet ve egzersiz programları hazırlayabilir, yemek tarifleri verebilirsin.\r\n        Kilo verme için günlük 500-1000 kalori açığı, kilo alma için günlük 300-500 kalori fazlalığı hedefle.\r\n        Harris-Benedict denklemi ile bazal metabolizma hızını hesapla.\r\n        Tarifler Türk mutfağına uygun olmalı ve bulunan malzemeleri kullanmalı.\r\n        Kullanıcının hedeflerine ve aktivite düzeyine göre protein, karbonhidrat ve yağ oranları:\r\n        - Kilo verme: protein %30-35, karbonhidrat %40-45, yağ %20-25\r\n        - Kilo alma: protein %25-30, karbonhidrat %50-55, yağ %20-25\r\n        - Kas kazanma: protein %30-35, karbonhidrat %45-50, yağ %15-20\r\n        - Sağlıklı beslenme: protein %20-25, karbonhidrat %50-55, yağ %25-30\r\n      `;\r\n      \r\n      // Önceki mesaj geçmişini oluştur\r\n      const previousMessages = messages.slice(-6) // Son 6 mesajı al\r\n        .map(msg => ({\r\n          role: msg.sender === 'user' ? 'user' : 'assistant',\r\n          content: msg.text\r\n        }));\r\n      \r\n      // AI isteği gönder\r\n      const response = await axios.post('http://localhost:5000/api/ai/chat', {\r\n        messages: [\r\n          { role: 'system', content: contextInfo },\r\n          ...previousMessages,\r\n          { role: 'user', content: userMessage }\r\n        ]\r\n      });\r\n      \r\n      if (response.data && response.data.response) {\r\n        addBotMessage(response.data.response);\r\n      } else {\r\n        addBotMessage(\"Üzgünüm, şu anda yanıt oluşturamadım. Lütfen daha sonra tekrar deneyin.\");\r\n      }\r\n    } catch (error) {\r\n      console.error('AI yanıt üretirken hata:', error);\r\n      addBotMessage(\"Üzgünüm, bir hata oluştu. Lütfen daha sonra tekrar deneyin.\");\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSend = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!input.trim()) return;\r\n    \r\n    const userMessage = input;\r\n    addUserMessage(userMessage);\r\n    setInput('');\r\n    \r\n    if (stage === 'collecting' && !userInfo.collected) {\r\n      const handled = processUserInfo(userMessage);\r\n      if (handled) return;\r\n    }\r\n    \r\n    await generateResponse(userMessage);\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"chat-header\">\r\n        <div className=\"chat-title\">\r\n          <h2>Diyet Dostu AI Asistanı</h2>\r\n          <p>Kişisel beslenme ve fitness uzmanınız</p>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"messages-container\">\r\n        {messages.map((message, index) => (\r\n          <div key={index} className={`message ${message.sender}`}>\r\n            <div className=\"message-content\">\r\n              {message.text.split('\\n').map((item, key) => (\r\n                <p key={key}>{item}</p>\r\n              ))}\r\n            </div>\r\n            <div className=\"message-time\">\r\n              {new Date(message.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}\r\n            </div>\r\n          </div>\r\n        ))}\r\n        \r\n        {isLoading && (\r\n          <div className=\"message bot\">\r\n            <div className=\"message-content\">\r\n              <div className=\"typing-indicator\">\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        \r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n      \r\n      <form className=\"chat-input-form\" onSubmit={handleSend}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Mesajınızı yazın...\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          disabled={isLoading}\r\n        />\r\n        <button \r\n          type=\"submit\" \r\n          disabled={isLoading || !input.trim()}\r\n        >\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 19l9 2-9-18-9 18 9-2zm0 0v-8\" />\r\n          </svg>\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AiChat; "],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,sBAAsB;AAE7B,MAAMC,MAAM,GAAGA,CAAA,KAAM;EACnB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC;IACvCe,MAAM,EAAE,EAAE;IACVC,MAAM,EAAE,EAAE;IACVC,GAAG,EAAE,EAAE;IACPC,MAAM,EAAE,EAAE;IACVC,QAAQ,EAAE,EAAE;IACZC,IAAI,EAAE,EAAE;IACRC,SAAS,EAAE,EAAE;IACbC,WAAW,EAAE,EAAE;IACfC,MAAM,EAAE,EAAE;IACVC,SAAS,EAAE;EACb,CAAC,CAAC;EACF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAG1B,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;EAChD,MAAM2B,cAAc,GAAGzB,MAAM,CAAC,IAAI,CAAC;;EAEnC;EACAD,SAAS,CAAC,MAAM;IACd,MAAM2B,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC3C,IAAI,CAACF,KAAK,EAAE;QAEZ,MAAMG,QAAQ,GAAG,MAAM7B,KAAK,CAAC8B,GAAG,CAAC,mCAAmC,EAAE;UACpEC,OAAO,EAAE;YAAEC,aAAa,EAAE,UAAUN,KAAK;UAAG;QAC9C,CAAC,CAAC;QAEF,IAAIG,QAAQ,CAACI,IAAI,EAAE;UACjBxB,WAAW,CAACoB,QAAQ,CAACI,IAAI,CAAC;;UAE1B;UACA,MAAM;YAAEC,IAAI;YAAEjB,IAAI;YAAEkB;UAAK,CAAC,GAAGN,QAAQ,CAACI,IAAI;UAC1C,IAAIC,IAAI,EAAE;YACRvB,WAAW,CAACyB,QAAQ,KAAK;cACvB,GAAGA,QAAQ;cACXxB,MAAM,EAAEsB,IAAI,CAACtB,MAAM,IAAI,EAAE;cACzBC,MAAM,EAAEqB,IAAI,CAACrB,MAAM,IAAI,EAAE;cACzBC,GAAG,EAAEoB,IAAI,CAACpB,GAAG,IAAI,EAAE;cACnBC,MAAM,EAAEmB,IAAI,CAACnB,MAAM,IAAI,EAAE;cACzBK,MAAM,EAAEc,IAAI,CAACG,QAAQ,IAAI;YAC3B,CAAC,CAAC,CAAC;UACL;UAEA,IAAIpB,IAAI,EAAE;YACRN,WAAW,CAACyB,QAAQ,KAAK;cACvB,GAAGA,QAAQ;cACXnB,IAAI,EAAEA;YACR,CAAC,CAAC,CAAC;UACL;;UAEA;UACAqB,aAAa,CAAC,WAAWH,IAAI,IAAI,QAAQ,wIAAwI,CAAC;;UAElL;UACA,IAAID,IAAI,IAAIA,IAAI,CAACtB,MAAM,IAAIsB,IAAI,CAACrB,MAAM,IAAIqB,IAAI,CAACpB,GAAG,IAAIoB,IAAI,CAACnB,MAAM,IAAIE,IAAI,EAAE;YACzEN,WAAW,CAACyB,QAAQ,KAAK;cACvB,GAAGA,QAAQ;cACXf,SAAS,EAAE;YACb,CAAC,CAAC,CAAC;YACHE,QAAQ,CAAC,MAAM,CAAC;YAEhBgB,UAAU,CAAC,MAAM;cACfD,aAAa,CACX,oHAAoH,GACpH,sFAAsF,GACtF,2CAA2C,GAC3C,kHACF,CAAC;YACH,CAAC,EAAE,IAAI,CAAC;UACV,CAAC,MAAM;YACL;YACAf,QAAQ,CAAC,YAAY,CAAC;YACtBgB,UAAU,CAAC,MAAM;cACfD,aAAa,CAAC,8IAA8I,CAAC;cAC7JE,eAAe,CAAC,CAAC;YACnB,CAAC,EAAE,IAAI,CAAC;UACV;QACF;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;QAC1D;QACAH,aAAa,CAAC,+JAA+J,CAAC;QAC9Kf,QAAQ,CAAC,YAAY,CAAC;QACtBgB,UAAU,CAAC,MAAM;UACfC,eAAe,CAAC,CAAC;QACnB,CAAC,EAAE,IAAI,CAAC;MACV;IACF,CAAC;IAEDf,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN3B,SAAS,CAAC,MAAM;IACd6C,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACzC,QAAQ,CAAC,CAAC;EAEd,MAAMyC,cAAc,GAAGA,CAAA,KAAM;IAAA,IAAAC,qBAAA;IAC3B,CAAAA,qBAAA,GAAApB,cAAc,CAACqB,OAAO,cAAAD,qBAAA,uBAAtBA,qBAAA,CAAwBE,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EAChE,CAAC;EAED,MAAMT,aAAa,GAAIU,IAAI,IAAK;IAC9B7C,WAAW,CAAC8C,YAAY,IAAI,CAC1B,GAAGA,YAAY,EACf;MACEC,MAAM,EAAE,KAAK;MACbF,IAAI;MACJG,SAAS,EAAE,IAAIC,IAAI,CAAC;IACtB,CAAC,CACF,CAAC;EACJ,CAAC;EAED,MAAMC,cAAc,GAAIL,IAAI,IAAK;IAC/B7C,WAAW,CAAC8C,YAAY,IAAI,CAC1B,GAAGA,YAAY,EACf;MACEC,MAAM,EAAE,MAAM;MACdF,IAAI;MACJG,SAAS,EAAE,IAAIC,IAAI,CAAC;IACtB,CAAC,CACF,CAAC;EACJ,CAAC;EAED,MAAMZ,eAAe,GAAGA,CAAA,KAAM;IAC5B,MAAM;MAAE5B,MAAM;MAAEC,MAAM;MAAEC,GAAG;MAAEC,MAAM;MAAEC,QAAQ;MAAEC,IAAI;MAAEC,SAAS;MAAEC;IAAY,CAAC,GAAGT,QAAQ;IAExF,IAAI,CAACE,MAAM,EAAE;MACX0B,aAAa,CAAC,iBAAiB,CAAC;MAChC;IACF;IACA,IAAI,CAACzB,MAAM,EAAE;MACXyB,aAAa,CAAC,6BAA6B,CAAC;MAC5C;IACF;IACA,IAAI,CAACxB,GAAG,EAAE;MACRwB,aAAa,CAAC,UAAU,CAAC;MACzB;IACF;IACA,IAAI,CAACvB,MAAM,EAAE;MACXuB,aAAa,CAAC,yCAAyC,CAAC;MACxD;IACF;IACA,IAAI,CAACtB,QAAQ,EAAE;MACbsB,aAAa,CAAC,2JAA2J,CAAC;MAC1K;IACF;IACA,IAAI,CAACrB,IAAI,EAAE;MACTqB,aAAa,CAAC,gGAAgG,CAAC;MAC/G;IACF;IACA,IAAI,CAACpB,SAAS,EAAE;MACdoB,aAAa,CAAC,4FAA4F,CAAC;MAC3G;IACF;IACA,IAAI,CAACnB,WAAW,EAAE;MAChBmB,aAAa,CAAC,8GAA8G,CAAC;MAC7H;IACF;;IAEA;IACA3B,WAAW,CAACyB,QAAQ,KAAK;MAAE,GAAGA,QAAQ;MAAEf,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAC3DE,QAAQ,CAAC,MAAM,CAAC;;IAEhB;IACA+B,YAAY,CAAC,CAAC;;IAEd;IACAhB,aAAa,CACX;AACN,aAAa1B,MAAM;AACnB,cAAcC,MAAM;AACpB,aAAaC,GAAG;AAChB,kBAAkBC,MAAM;AACxB,2BAA2BC,QAAQ;AACnC,eAAeC,IAAI;AACnB,oCAAoCC,SAAS;AAC7C,6BAA6BC,WAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCACI,CAAC;EACH,CAAC;EAED,MAAMmC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,MAAM5B,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAI,CAACF,KAAK,EAAE;;MAEZ;MACA,MAAM1B,KAAK,CAACuD,IAAI,CACd,0CAA0C,EAC1C;QACEC,IAAI,EAAE,UAAU;QAChB5C,MAAM,EAAEF,QAAQ,CAACE,MAAM;QACvBC,MAAM,EAAEH,QAAQ,CAACG,MAAM;QACvBC,GAAG,EAAEJ,QAAQ,CAACI,GAAG;QACjBC,MAAM,EAAEL,QAAQ,CAACK,MAAM;QACvBE,IAAI,EAAEP,QAAQ,CAACO,IAAI;QACnBwC,UAAU,EAAE;UACVzC,QAAQ,EAAEN,QAAQ,CAACM,QAAQ;UAC3BE,SAAS,EAAER,QAAQ,CAACQ,SAAS;UAC7BC,WAAW,EAAET,QAAQ,CAACS;QACxB;MACF,CAAC,EACD;QAAEY,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUN,KAAK;QAAG;MAAE,CAClD,CAAC;MAEDgB,OAAO,CAACgB,GAAG,CAAC,2CAA2C,CAAC;IAC1D,CAAC,CAAC,OAAOjB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;EAED,MAAMkB,eAAe,GAAIC,OAAO,IAAK;IACnC,MAAM;MAAEhD,MAAM;MAAEC,MAAM;MAAEC,GAAG;MAAEC,MAAM;MAAEC,QAAQ;MAAEC,IAAI;MAAEC,SAAS;MAAEC;IAAY,CAAC,GAAGT,QAAQ;IAExF,IAAI,CAACE,MAAM,EAAE;MACX,MAAMiD,WAAW,GAAGD,OAAO,CAACE,KAAK,CAAC,OAAO,CAAC;MAC1C,IAAID,WAAW,EAAE;QACflD,WAAW,CAACyB,QAAQ,KAAK;UAAE,GAAGA,QAAQ;UAAExB,MAAM,EAAEiD,WAAW,CAAC,CAAC;QAAE,CAAC,CAAC,CAAC;QAClEtB,UAAU,CAAC,MAAMC,eAAe,CAAC,CAAC,EAAE,GAAG,CAAC;MAC1C,CAAC,MAAM;QACLF,aAAa,CAAC,6DAA6D,CAAC;MAC9E;MACA,OAAO,IAAI;IACb;IAEA,IAAI,CAACzB,MAAM,EAAE;MACX,MAAMkD,WAAW,GAAGH,OAAO,CAACE,KAAK,CAAC,OAAO,CAAC;MAC1C,IAAIC,WAAW,EAAE;QACfpD,WAAW,CAACyB,QAAQ,KAAK;UAAE,GAAGA,QAAQ;UAAEvB,MAAM,EAAEkD,WAAW,CAAC,CAAC;QAAE,CAAC,CAAC,CAAC;QAClExB,UAAU,CAAC,MAAMC,eAAe,CAAC,CAAC,EAAE,GAAG,CAAC;MAC1C,CAAC,MAAM;QACLF,aAAa,CAAC,4DAA4D,CAAC;MAC7E;MACA,OAAO,IAAI;IACb;IAEA,IAAI,CAACxB,GAAG,EAAE;MACR,MAAMkD,QAAQ,GAAGJ,OAAO,CAACE,KAAK,CAAC,OAAO,CAAC;MACvC,IAAIE,QAAQ,EAAE;QACZrD,WAAW,CAACyB,QAAQ,KAAK;UAAE,GAAGA,QAAQ;UAAEtB,GAAG,EAAEkD,QAAQ,CAAC,CAAC;QAAE,CAAC,CAAC,CAAC;QAC5DzB,UAAU,CAAC,MAAMC,eAAe,CAAC,CAAC,EAAE,GAAG,CAAC;MAC1C,CAAC,MAAM;QACLF,aAAa,CAAC,+CAA+C,CAAC;MAChE;MACA,OAAO,IAAI;IACb;IAEA,IAAI,CAACvB,MAAM,EAAE;MACX,MAAMkD,YAAY,GAAGL,OAAO,CAACM,WAAW,CAAC,CAAC;MAC1C,IAAID,YAAY,CAACE,QAAQ,CAAC,OAAO,CAAC,EAAE;QAClCxD,WAAW,CAACyB,QAAQ,KAAK;UAAE,GAAGA,QAAQ;UAAErB,MAAM,EAAE;QAAQ,CAAC,CAAC,CAAC;MAC7D,CAAC,MAAM,IAAIkD,YAAY,CAACE,QAAQ,CAAC,OAAO,CAAC,IAAIF,YAAY,CAACE,QAAQ,CAAC,OAAO,CAAC,EAAE;QAC3ExD,WAAW,CAACyB,QAAQ,KAAK;UAAE,GAAGA,QAAQ;UAAErB,MAAM,EAAE;QAAQ,CAAC,CAAC,CAAC;MAC7D,CAAC,MAAM,IAAIkD,YAAY,CAACE,QAAQ,CAAC,OAAO,CAAC,IAAIF,YAAY,CAACE,QAAQ,CAAC,OAAO,CAAC,EAAE;QAC3ExD,WAAW,CAACyB,QAAQ,KAAK;UAAE,GAAGA,QAAQ;UAAErB,MAAM,EAAE;QAAQ,CAAC,CAAC,CAAC;MAC7D,CAAC,MAAM;QACLuB,aAAa,CAAC,sEAAsE,CAAC;QACrF,OAAO,IAAI;MACb;MACAC,UAAU,CAAC,MAAMC,eAAe,CAAC,CAAC,EAAE,GAAG,CAAC;MACxC,OAAO,IAAI;IACb;IAEA,IAAI,CAACxB,QAAQ,EAAE;MACb,MAAMoD,aAAa,GAAGR,OAAO,CAACE,KAAK,CAAC,SAAS,CAAC;MAC9C,IAAIM,aAAa,EAAE;QACjB,MAAMC,aAAa,GAAGD,aAAa,CAAC,CAAC,CAAC;QACtC,IAAIE,YAAY,GAAG,EAAE;QAErB,QAAOD,aAAa;UAClB,KAAK,GAAG;YAAEC,YAAY,GAAG,YAAY;YAAE;UACvC,KAAK,GAAG;YAAEA,YAAY,GAAG,aAAa;YAAE;UACxC,KAAK,GAAG;YAAEA,YAAY,GAAG,YAAY;YAAE;UACvC,KAAK,GAAG;YAAEA,YAAY,GAAG,OAAO;YAAE;UAClC,KAAK,GAAG;YAAEA,YAAY,GAAG,WAAW;YAAE;QACxC;QAEA3D,WAAW,CAACyB,QAAQ,KAAK;UAAE,GAAGA,QAAQ;UAAEpB,QAAQ,EAAEsD;QAAa,CAAC,CAAC,CAAC;QAClE/B,UAAU,CAAC,MAAMC,eAAe,CAAC,CAAC,EAAE,GAAG,CAAC;MAC1C,CAAC,MAAM;QACLF,aAAa,CAAC,8DAA8D,CAAC;MAC/E;MACA,OAAO,IAAI;IACb;IAEA,IAAI,CAACrB,IAAI,EAAE;MACT,MAAMgD,YAAY,GAAGL,OAAO,CAACM,WAAW,CAAC,CAAC;MAC1C,IAAIK,SAAS,GAAG,EAAE;MAElB,IAAIN,YAAY,CAACE,QAAQ,CAAC,UAAU,CAAC,EAAE;QACrCI,SAAS,GAAG,YAAY;MAC1B,CAAC,MAAM,IAAIN,YAAY,CAACE,QAAQ,CAAC,SAAS,CAAC,EAAE;QAC3CI,SAAS,GAAG,WAAW;MACzB,CAAC,MAAM,IAAIN,YAAY,CAACE,QAAQ,CAAC,WAAW,CAAC,EAAE;QAC7CI,SAAS,GAAG,aAAa;MAC3B,CAAC,MAAM,IAAIN,YAAY,CAACE,QAAQ,CAAC,KAAK,CAAC,IAAIF,YAAY,CAACE,QAAQ,CAAC,OAAO,CAAC,EAAE;QACzEI,SAAS,GAAG,aAAa;MAC3B,CAAC,MAAM,IAAIN,YAAY,CAACE,QAAQ,CAAC,QAAQ,CAAC,IAAIF,YAAY,CAACE,QAAQ,CAAC,QAAQ,CAAC,EAAE;QAC7EI,SAAS,GAAG,mBAAmB;MACjC,CAAC,MAAM;QACLjC,aAAa,CAAC,6HAA6H,CAAC;QAC5I,OAAO,IAAI;MACb;MAEA3B,WAAW,CAACyB,QAAQ,KAAK;QAAE,GAAGA,QAAQ;QAAEnB,IAAI,EAAEsD;MAAU,CAAC,CAAC,CAAC;MAC3DhC,UAAU,CAAC,MAAMC,eAAe,CAAC,CAAC,EAAE,GAAG,CAAC;MACxC,OAAO,IAAI;IACb;IAEA,IAAI,CAACtB,SAAS,EAAE;MACdP,WAAW,CAACyB,QAAQ,KAAK;QAAE,GAAGA,QAAQ;QAAElB,SAAS,EAAE0C;MAAQ,CAAC,CAAC,CAAC;MAC9DrB,UAAU,CAAC,MAAMC,eAAe,CAAC,CAAC,EAAE,GAAG,CAAC;MACxC,OAAO,IAAI;IACb;IAEA,IAAI,CAACrB,WAAW,EAAE;MAChBR,WAAW,CAACyB,QAAQ,KAAK;QAAE,GAAGA,QAAQ;QAAEjB,WAAW,EAAEyC;MAAQ,CAAC,CAAC,CAAC;MAChErB,UAAU,CAAC,MAAMC,eAAe,CAAC,CAAC,EAAE,GAAG,CAAC;MACxC,OAAO,IAAI;IACb;IAEA,OAAO,KAAK;EACd,CAAC;EAED,MAAMgC,gBAAgB,GAAG,MAAOC,WAAW,IAAK;IAC9ClE,YAAY,CAAC,IAAI,CAAC;IAElB,IAAI;MACF;MACA,MAAMmE,WAAW,GAAG;AAC1B;AACA,eAAehE,QAAQ,CAACE,MAAM;AAC9B,gBAAgBF,QAAQ,CAACG,MAAM;AAC/B,eAAeH,QAAQ,CAACI,GAAG;AAC3B,oBAAoBJ,QAAQ,CAACK,MAAM;AACnC,6BAA6BL,QAAQ,CAACM,QAAQ;AAC9C,iBAAiBN,QAAQ,CAACO,IAAI,KAAK,YAAY,GAAG,aAAa,GAC/CP,QAAQ,CAACO,IAAI,KAAK,WAAW,GAAG,YAAY,GAC5CP,QAAQ,CAACO,IAAI,KAAK,aAAa,GAAG,cAAc,GAChDP,QAAQ,CAACO,IAAI,KAAK,aAAa,GAAG,cAAc,GAAG,oBAAoB;AACvF,sCAAsCP,QAAQ,CAACQ,SAAS;AACxD,+BAA+BR,QAAQ,CAACS,WAAW;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;MAED;MACA,MAAMwD,gBAAgB,GAAGzE,QAAQ,CAAC0E,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;MAAA,CACzCC,GAAG,CAACC,GAAG,KAAK;QACXC,IAAI,EAAED,GAAG,CAAC5B,MAAM,KAAK,MAAM,GAAG,MAAM,GAAG,WAAW;QAClD8B,OAAO,EAAEF,GAAG,CAAC9B;MACf,CAAC,CAAC,CAAC;;MAEL;MACA,MAAMnB,QAAQ,GAAG,MAAM7B,KAAK,CAACuD,IAAI,CAAC,mCAAmC,EAAE;QACrErD,QAAQ,EAAE,CACR;UAAE6E,IAAI,EAAE,QAAQ;UAAEC,OAAO,EAAEN;QAAY,CAAC,EACxC,GAAGC,gBAAgB,EACnB;UAAEI,IAAI,EAAE,MAAM;UAAEC,OAAO,EAAEP;QAAY,CAAC;MAE1C,CAAC,CAAC;MAEF,IAAI5C,QAAQ,CAACI,IAAI,IAAIJ,QAAQ,CAACI,IAAI,CAACJ,QAAQ,EAAE;QAC3CS,aAAa,CAACT,QAAQ,CAACI,IAAI,CAACJ,QAAQ,CAAC;MACvC,CAAC,MAAM;QACLS,aAAa,CAAC,yEAAyE,CAAC;MAC1F;IACF,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDH,aAAa,CAAC,6DAA6D,CAAC;IAC9E,CAAC,SAAS;MACR/B,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAM0E,UAAU,GAAG,MAAOC,CAAC,IAAK;IAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAI,CAAC/E,KAAK,CAACgF,IAAI,CAAC,CAAC,EAAE;IAEnB,MAAMX,WAAW,GAAGrE,KAAK;IACzBiD,cAAc,CAACoB,WAAW,CAAC;IAC3BpE,QAAQ,CAAC,EAAE,CAAC;IAEZ,IAAIiB,KAAK,KAAK,YAAY,IAAI,CAACZ,QAAQ,CAACW,SAAS,EAAE;MACjD,MAAMgE,OAAO,GAAG1B,eAAe,CAACc,WAAW,CAAC;MAC5C,IAAIY,OAAO,EAAE;IACf;IAEA,MAAMb,gBAAgB,CAACC,WAAW,CAAC;EACrC,CAAC;EAED,oBACE7E,KAAA,CAAA0F,aAAA;IAAKC,SAAS,EAAC,gBAAgB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC7BjG,KAAA,CAAA0F,aAAA;IAAKC,SAAS,EAAC,aAAa;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC1BjG,KAAA,CAAA0F,aAAA;IAAKC,SAAS,EAAC,YAAY;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACzBjG,KAAA,CAAA0F,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,8BAA2B,CAAC,eAChCjG,KAAA,CAAA0F,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAG,sDAAwC,CACxC,CACF,CAAC,eAENjG,KAAA,CAAA0F,aAAA;IAAKC,SAAS,EAAC,oBAAoB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAChC3F,QAAQ,CAAC2E,GAAG,CAAC,CAACjB,OAAO,EAAEkC,KAAK,kBAC3BlG,KAAA,CAAA0F,aAAA;IAAKS,GAAG,EAAED,KAAM;IAACP,SAAS,EAAE,WAAW3B,OAAO,CAACV,MAAM,EAAG;IAAAsC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACtDjG,KAAA,CAAA0F,aAAA;IAAKC,SAAS,EAAC,iBAAiB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC7BjC,OAAO,CAACZ,IAAI,CAACgD,KAAK,CAAC,IAAI,CAAC,CAACnB,GAAG,CAAC,CAACoB,IAAI,EAAEF,GAAG,kBACtCnG,KAAA,CAAA0F,aAAA;IAAGS,GAAG,EAAEA,GAAI;IAAAP,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAEI,IAAQ,CACvB,CACE,CAAC,eACNrG,KAAA,CAAA0F,aAAA;IAAKC,SAAS,EAAC,cAAc;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC1B,IAAIzC,IAAI,CAACQ,OAAO,CAACT,SAAS,CAAC,CAAC+C,kBAAkB,CAAC,EAAE,EAAE;IAACC,IAAI,EAAE,SAAS;IAAEC,MAAM,EAAC;EAAS,CAAC,CACpF,CACF,CACN,CAAC,EAED9F,SAAS,iBACRV,KAAA,CAAA0F,aAAA;IAAKC,SAAS,EAAC,aAAa;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC1BjG,KAAA,CAAA0F,aAAA;IAAKC,SAAS,EAAC,iBAAiB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC9BjG,KAAA,CAAA0F,aAAA;IAAKC,SAAS,EAAC,kBAAkB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC/BjG,KAAA,CAAA0F,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAY,CAAC,eACbjG,KAAA,CAAA0F,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAY,CAAC,eACbjG,KAAA,CAAA0F,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAY,CACT,CACF,CACF,CACN,eAEDjG,KAAA,CAAA0F,aAAA;IAAKe,GAAG,EAAE7E,cAAe;IAAAgE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CACxB,CAAC,eAENjG,KAAA,CAAA0F,aAAA;IAAMC,SAAS,EAAC,iBAAiB;IAACe,QAAQ,EAAErB,UAAW;IAAAO,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACrDjG,KAAA,CAAA0F,aAAA;IACE9B,IAAI,EAAC,MAAM;IACX+C,WAAW,EAAC,yCAAqB;IACjCC,KAAK,EAAEpG,KAAM;IACbqG,QAAQ,EAAGvB,CAAC,IAAK7E,QAAQ,CAAC6E,CAAC,CAACwB,MAAM,CAACF,KAAK,CAAE;IAC1CG,QAAQ,EAAErG,SAAU;IAAAkF,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACrB,CAAC,eACFjG,KAAA,CAAA0F,aAAA;IACE9B,IAAI,EAAC,QAAQ;IACbmD,QAAQ,EAAErG,SAAS,IAAI,CAACF,KAAK,CAACgF,IAAI,CAAC,CAAE;IAAAI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAErCjG,KAAA,CAAA0F,aAAA;IAAKsB,KAAK,EAAC,4BAA4B;IAACC,IAAI,EAAC,MAAM;IAACC,OAAO,EAAC,WAAW;IAACC,MAAM,EAAC,cAAc;IAAAvB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC3FjG,KAAA,CAAA0F,aAAA;IAAM0B,aAAa,EAAC,OAAO;IAACC,cAAc,EAAC,OAAO;IAACC,WAAW,EAAE,CAAE;IAACC,CAAC,EAAC,kCAAkC;IAAA3B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CACtG,CACC,CACJ,CACH,CAAC;AAEV,CAAC;AAED,eAAe5F,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module"}